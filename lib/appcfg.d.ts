// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../atma-utils

declare module 'appcfg' {
    import { Config } from 'appcfg/ConfigNode';
    export = Config;
}

declare module 'appcfg/ConfigNode' {
    
    export { Config } from 'appcfg/Config';
}

declare module 'appcfg/Config' {
    import { IConfigParams } from 'appcfg/sources/ISource';
    import { Sources } from 'appcfg/sources/SourceFactory';
    import { class_Await } from 'appcfg/util/Await';
    export class Config<T = any> {
            /** Exports */
            static default: typeof Config;
            static Config: typeof Config;
            $cli: any;
            $data: any;
            $sources: Sources;
            $parallelReads: class_Await;
            $sync: boolean;
            constructor(data?: IConfigParams | IConfigParams[], opts?: {
                    sync?: boolean;
            });
            static fetch<T = {
                    [key: string]: any;
            }>(arr: IConfigParams | IConfigParams[], opts?: any): Promise<Config & T>;
            static create(arr: IConfigParams | IConfigParams[]): Config<any>;
            $get(path: any): any;
            $set(path: any, value: any): void;
            $extend(config: any): void;
            $read<T = any>(mix?: any): Promise<Config & T>;
            /**
                * @param config any json object
                * @param deepExtend Otherwise per default shallow copy is used.
                * @param setterPath
                * @returns
                */
            $write(config?: any, deepExtend?: boolean, setterPath?: string): any;
            $write(config?: any, opts?: {
                    deepExtend?: boolean;
                    setterPath?: string;
                    sourceName?: string;
            }): any;
            $is(name: any): boolean;
            toJSON(): any;
    }
}

declare module 'appcfg/sources/ISource' {
    export type ISourceCtor = {
        canHandle(data: IConfigParams): boolean;
        create(data: IConfigParams): ISource | ISource[];
    };
    export interface ISource {
        name?: string;
        data?: ISource;
        config?: any;
        read?(rootConfig?: any): Promise<this>;
        readSync?(rootConfig?: any): this;
        write?(config: any, deepExtend?: boolean, setterProperty?: string): Promise<this>;
        writable?: boolean;
        serializer?(config: any): string;
        deserializer?(content: any): Record<string, any>;
        beforeRead?(config: any, rootConfig: any): any;
        afterRead?(config: any, rootConfig: any): any;
        getterProperty?: string;
        setterProperty?: string;
        lookupAncestors?: boolean;
        extendArrays?: boolean;
        sync?: boolean;
    }
    export interface IDataCustom {
        new (): ISource;
    }
    export interface IDataEmbedded {
        config: any;
    }
    export interface IDataFile extends ISource {
        path: string;
        secret?: string;
        optional?: boolean;
    }
    export type IDataFiles = {
        files: string[];
    };
    export type IDataDirectory = {
        path: string;
    };
    export interface IDataLocalStorage {
        localStorage: string;
    }
    export interface IDataQuery {
        query: boolean;
    }
    export type IConfigParams = IDataDirectory | IDataCustom | IDataEmbedded | IDataFile | IDataFiles | any;
}

declare module 'appcfg/sources/SourceFactory' {
    import { class_Dfr } from 'atma-utils';
    import { Config } from 'appcfg/Config';
    import { IConfigParams, ISource, ISourceCtor } from 'appcfg/sources/ISource';
    export const Handlers: {
        [name: string]: ISourceCtor;
    };
    export class Sources {
        array: ISource[];
        promise: class_Dfr;
        add(mix: ISource | ISource[] | Sources): void;
        read(config: Config): void;
        loadSync(rootConfig: Config): ISource[];
        load(rootConfig: any, i?: number): PromiseLike<Sources>;
        toArray(): ISource[];
    }
    export const SourceFactory: {
        create(arr: IConfigParams | IConfigParams[]): Sources;
        register(name: any, Handler: ISourceCtor): void;
    };
}

declare module 'appcfg/util/Await' {
    import { class_Dfr } from 'atma-utils';
    export class class_Await {
        promise: class_Dfr<any>;
        error: any;
        completed: boolean;
        wait: number;
        constructor();
        delegate(opts?: {
            errorable?: boolean;
        }): (error: any) => void;
        always(fn: any): this;
    }
}

